name: Release Workflow

on:
  push:
    branches:
      - main
      - beta

permissions:
  contents: write

jobs:

  get-version:
    uses: shiipou/github-actions/.github/workflows/get-version.yml@main
    with:
      release-branches: '^(main)$'
      prerelease-branches: '^(beta)$'

  build:
    name: Build for Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-latest]
    needs: get-version
    if: ${{ needs.get-version.outputs.will-release == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          profile: minimal

      - name: Install Trunk and wasm-bindgen
        run: cargo install trunk wasm-bindgen-cli

      - name: trunk-action
        run: jetli/trunk-action@v0.5.0

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: ./dist/

  release:
      name: Create Release
      runs-on: ubuntu-latest
      needs: [get-version, build]
      if: ${{ needs.get-version.outputs.will-release == 'true' }}
      steps:
        - name: Download build artifacts
          uses: actions/download-artifact@v4
          with: 
            path: ./build/

        - name: Create GitHub Release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: v${{ needs.get-version.outputs.version }}
            release_name: Release v${{ needs.get-version.outputs.version }}
            draft: false
            prerelease: ${{ needs.get-version.outputs.is-prerelease }}
            body: ${{ needs.get-version.outputs.changelogs }}

        - name: Upload Release Assets
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./build/*
            asset_name: "build-${{ matrix.os }}-${{ needs.get-version.outputs.version }}.zip"
            asset_content_type: application/zip
